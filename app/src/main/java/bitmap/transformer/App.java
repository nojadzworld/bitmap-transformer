///*
// * This Java source file was generated by the Gradle 'init' task.
// */
package bitmap.transformer;
import java.io.FileInputStream;
import java.io.IOException;
import java.awt.Image;
import java.io.File;
import java.io.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class App {
    public static void main(String[] args) {
        if (args.length != 3) {
            System.err.println("Usage: java BitmapTransformer <input_file> <output_file> <transform>");
            return;
        }
        String inputFile = args[0];
        String outputFile = args[1];
        String transform = args[2];
        try {
            BufferedImage image = ImageIO.read(new File(inputFile));
            BufferedImage transformedImage = null;
            if (transform.equals("invert")) {
                transformedImage = invertColors(image);
            } else if (transform.equals("flipx")) {
                transformedImage = flipX(image);
            } else if (transform.equals("flipy")) {
                transformedImage = flipY(image);
            } else {
                System.err.println("Unknown transform: " + transform);
                System.exit(1);
            }
            writeBitmap(outputFile, transformedImage);
        } catch (IOException e) {
            System.err.println("Error: " + e.getMessage());
            System.exit(1);
        }
    }
    private static byte[] invertColors(byte[] bitmapData) {
        byte[] invertedData = bitmapData.clone();
        for (int i = 54; i < bitmapData.length; i++) {
            invertedData[i] = (byte) (255 - bitmapData[i]);
        }
        return invertedData;
    }
    private static byte[] flipX(byte[] image) {
        BufferedImage transformedImage = new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int rgb = image.getRGB(image.getWidth() - x - 1, y);
                transformedImage.setRGB(x, y, rgb);
            }
        }
        return transformedImage;
    }
    private static byte[] flipY(byte[] image) {
        BufferedImage transformedImage = new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int rgb = image.getRGB(x, image.getHeight() - y - 1);
                transformedImage.setRGB(x, y, rgb);
            }
        }
        return transformedImage;
    }
    private static void writeBitmap(String outputFile, BufferedImage bitmapData) throws IOException {
        try (OutputStream outputStream = new FileOutputStream(outputFile)) {
            ImageIO.write(bitmapData, "bmp", outputStream);
        }
    }
}